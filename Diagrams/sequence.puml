@startuml

actor Клиент as client
participant "Веб приложение\nклиента" as front1
participant "API приложение" as api
database БД as db
participant "Веб приложение\nадминистратора" as front2
actor Администратор as admin

loop Пока не получен доступ к сервису
    client -> front1 : Ввод данных для\nаутентификации
    front1 -> api : Передача логина/пароля
    api -> db : Запрос логина/пароля
    api -> api : Проверка данных

    alt Авторизация успешна
        api --> front1 : Возвращение токена
        front1 --> client : Получение доступа к сервису
    else Авторизация не успешна
        api --> front1 : Возвращение ошибки аутентификации
        front1 --> client : Отказ в доступе к сервису
    end
end

loop Пока не получен доступ к сервису
    admin -> front2 : Ввод данных для\nаутентификации
    front2 -> api : Передача логина/пароля
    api -> db : Запрос логина/пароля
    api -> api : Проверка данных

    alt Авторизация успешна
        api --> front2 : Возвращение токена
        front2 --> admin : Получение доступа к сервису
    else Авторизация не успешна
        api --> front2 : Возвращение ошибки аутентификации
        front2 --> admin : Отказ в доступе к сервису
    end
end

client -> front1 : Клиент зашел на сервис
front1 -> api : Запрос на получение доступных автомоек и их услуг
api -> db : Запрос на получение данных автомоек и их услуг
db --> api : Возвращение данных автомоек и их услуг
api --> front1 : Возвращение данных доступных автомоек и их услуг
front1 --> client : Получение списка доступных автомоек и их услуг

client -> front1 : Выбор автомойки, услуги и создание заказа
front1 -> api : Передача данных о выбранной автомойке и услугах
api -> api : Проверка корректности данных
api -> db : Добавление данных о заказе в БД\n(Created)

admin -> front2 : Открыто веб-приложение
front2 -> api : Запрос на получение данных\nо заказах
api -> db : Запрос на получение заказов\nна автомойке
db --> api : Возвращение данных о заказах
api --> front2 : Передача данных о заказах
front2 --> admin : Получение данных\nо заказах

alt Администратор подтверждает заказ
    admin -> front2 : Подтверждение заказа
    front2 -> api : Передача данных
    api -> db : Изменение статуса заказа\n(Confirmed)
    db --> api : Статус изменён
    api --> front2 : Передача успешного изменения статуса
    front2 --> admin : Изменение статуса на странице приложения
else Администратор отклоняет заказ
    admin -> front2 : Отклонение заказа с указанием причины
    front2 -> api : Передача данных
    api -> db: Изменение статуса заказа\n(Rejected)
    db --> api : Статус изменён
    api --> front2 : Передача успешного изменения статуса
    front2 --> admin : Изменение статуса на странице приложения
end

client -> front1 : Открыто веб-приложение
front1 -> api : Запрос на получение данных о заказе
api -> db : Запрос на получение данных о заказе
db --> api : Возвращение данных о заказе
api --> front1 : Передача данных о заказе

alt Заказ подтверждён
    front1 --> client : Получение подтверждения заказа\nна автомойке
else Заказ отклонён
    front1 --> client : Получение отклонения заказа\nна автомойке с причиной
    client -> front1 : Повторный заказ услуг
end

admin -> front2 : Изменяет статус заказа\n(InProgres)
note right
    В начале оказания услуг
end note
front2 -> api : Запрос на изменение статуса заказа
api -> db : Запрос на изменение статуса заказа(InProgres)
db --> api : Статус изменён
api --> front2 : Передача успешного изменения статуса
front2 --> admin : Изменение статуса на странице приложения

client -> front1 : Открыто веб-приложение
note left
    Опционально,
    Клиент может и не открывать приложение до окончания заказа
end note
front1 -> api : Запрос на получение данных о заказе
api -> db : Запрос на получение данных о заказе
db --> api : Возвращение данных о заказе
api --> front1 : Передача данных о заказе
front1 --> client : Получение данных о заказе

admin -> front2 : Изменяет статус заказа\n(Finished)
note right
    В конце оказания услуг
end note
front2 -> api : Запрос на изменение статуса заказа
api -> db : Запрос на изменение статуса заказа(Finished)
db --> api : Статус изменён
api --> front2 : Передача успешного изменения статуса
front2 --> admin : Изменение статуса на странице приложения

client -> front1 : Открыто веб-приложение
front1 -> api : Запрос на получение данных о заказе
api -> db : Запрос на получение данных о заказе
db --> api : Возвращение данных о заказе
api --> front1 : Передача данных о заказе
front1 --> client : Получение данных о заказе

newpage Отмена заказа со стороны клиента

client -> front1 : Отменяет заказ с указанием причины
note left
    Возможно только при статусах заказа:
    Created или Confirmed
end note
front1 -> api : Передача данных
api -> db : Запрос на изменение статуса заказа
db --> api : Статус изменён
api --> front1 : Передача успешного изменения статуса
front1 --> client : Изменение статуса на странице приложения

admin -> front2 : Открыто веб-приложение
front2 -> api : Запрос на получение данных\nо заказах
api -> db : Запрос на получение заказов\nна автомойке
db --> api : Возвращение данных о заказах
api --> front2 : Передача данных о заказах
front2 --> admin : Получение данных\nо заказах

newpage Отмена заказа со стороны администратора

admin -> front2 : Отменяет заказ с указанием причины
note right
    Возможно при статусах:
    Confirmed или InProgress
end note
front2 -> api : Передача данных
api -> db : Запрос на изменение статуса заказа
db --> api : Статус изменён
api --> front2 : Передача успешного изменения статуса
front2 --> admin : Изменение статуса на странице приложения

client -> front1 : Открыто веб-приложение
front1 -> api : Запрос на получение данных\nо заказе
api -> db : Запрос на получение данных\nо заказе
db --> api : Возвращение данных о заказе
api --> front1 : Передача данных о заказе
front1 --> client : Получение данных\nо заказе

@enduml