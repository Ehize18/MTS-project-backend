// <auto-generated />
using System;
using CarWashes.DataBase.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarWashes.DataBase.Postgres.Migrations
{
    [DbContext(typeof(CarWashesDbContext))]
    partial class CarWashesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.CanceledOrderEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.ToTable("CanceledOrders", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.CarwashEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<TimeOnly>("WorkTimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("WorkTimeStart")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("Carwashes", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.HumanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("F_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("L_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("M_Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Phone")
                        .IsUnique();

                    b.ToTable("Humans", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CarReleaseYear")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.PostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarWashId")
                        .HasColumnType("integer");

                    b.Property<int>("InternalNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarWashId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarwashId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CarwashId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("HumanId")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("Vk_token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HumanId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("CarwashEntityUserEntity", b =>
                {
                    b.Property<int>("CarwashesId")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("CarwashesId", "StaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("CarwashEntityUserEntity", (string)null);
                });

            modelBuilder.Entity("OrderEntityServiceEntity", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer");

                    b.HasKey("OrdersId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("OrderEntityServiceEntity", (string)null);
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.CanceledOrderEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.OrderEntity", "Order")
                        .WithOne("CanceledOrder")
                        .HasForeignKey("CarWashes.DataBase.Postgres.Models.CanceledOrderEntity", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.OrderEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.PostEntity", "Post")
                        .WithMany("Orders")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWashes.DataBase.Postgres.Models.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.PostEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.CarwashEntity", "CarWash")
                        .WithMany("Posts")
                        .HasForeignKey("CarWashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWash");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.ServiceEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.CarwashEntity", "Carwash")
                        .WithMany("Services")
                        .HasForeignKey("CarwashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carwash");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.UserEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.HumanEntity", "Human")
                        .WithMany("Users")
                        .HasForeignKey("HumanId");

                    b.Navigation("Human");
                });

            modelBuilder.Entity("CarwashEntityUserEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.CarwashEntity", null)
                        .WithMany()
                        .HasForeignKey("CarwashesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWashes.DataBase.Postgres.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderEntityServiceEntity", b =>
                {
                    b.HasOne("CarWashes.DataBase.Postgres.Models.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWashes.DataBase.Postgres.Models.ServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.CarwashEntity", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.HumanEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.OrderEntity", b =>
                {
                    b.Navigation("CanceledOrder");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.PostEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CarWashes.DataBase.Postgres.Models.UserEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
